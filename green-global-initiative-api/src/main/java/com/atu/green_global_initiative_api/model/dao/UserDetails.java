package com.atu.green_global_initiative_api.model.dao;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;
import java.util.List;

/**
 * Represents a user's details in the system, including personal information such as their name,
 * email, password, admin status, and last login timestamp. This entity is mapped to the "user_details"
 * table in the database.
 *
 * <p>This class also holds a list of application details submitted by the user, which is a one-to-many
 * relationship with the "ApplicationDetails" entity.</p>
 *
 * <p>Example usage:</p>
 * <pre>
 * UserDetails user = new UserDetails();
 * user.setFirstName("John");
 * user.setLastName("Doe");
 * user.setEmail("john.doe@example.com");
 * user.setPassword("password123");
 * user.setAdmin(true);
 * user.setLastLogin("2025-03-19T14:00:00");
 * </pre>
 *
 * <p>This entity is used to manage user information and track the applications they submit.</p>
 *
 * @author "Name Here"
 * @since 2025-03-19
 */
@Entity
@Data
@Getter
@Setter
@Table(name="user_details")
public class UserDetails {

    /**
     * Unique identifier for the user.
     * This value is automatically generated by the database upon insertion.
     */
    @Id
    @JsonProperty("user_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="user_id", unique = true, nullable = false)
    private int userId;

    /**
     * The first name of the user.
     * This field cannot be null.
     */
    @JsonProperty("first_name")
    @Column(name="first_name",nullable = false)
    private String firstName;

    /**
     * The last name of the user.
     * This field cannot be null.
     */
    @JsonProperty("last_name")
    @Column(name="last_name",nullable = false)
    private String lastName;

    /**
     * The email address of the user.
     * This field cannot be null.
     */
    @JsonProperty("email")
    @Column(name="email",nullable = false)
    private String email;

    /**
     * The password for the user account.
     * This field cannot be null.
     */
    @JsonProperty("password")
    @Column(name="password",nullable = false)
    private String password;

    /**
     * Indicates whether the user is an administrator.
     * A value of true means the user has admin privileges, false means they do not.
     * This field cannot be null.
     */
    @JsonProperty("is_admin")
    @Column(name="isAdmin",nullable = false)
    private boolean isAdmin;

    /**
     * The timestamp of the user's last login.
     * This field cannot be null.
     */
    @JsonProperty("last_login")
    @Column(name="last_login",nullable = false)
    private String lastLogin;


//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userDetails")
//    private List<ApplicationDetails> applicationDetailsList;
    /**
     * A list of applications submitted by this user.
     * This is a one-to-many relationship with the ApplicationDetails entity.
     * The fetch type is set to EAGER, meaning the application details are loaded immediately with the user.
     */
    @OneToMany(mappedBy = "userDetails", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    private List<ApplicationDetails> applicationDetails;

    /**
     * Gets the unique identifier of the user.
     *
     * @return the user's unique ID.
     */
    public int getUserId() {
        return userId;
    }

    /**
     * Sets the unique identifier of the user.
     *
     * @param userId the user's unique ID.
     */
    public void setUserId(int userId) {
        this.userId = userId;
    }

    /**
     * Gets the first name of the user.
     *
     * @return the user's first name.
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Sets the first name of the user.
     *
     * @param firstName the user's first name.
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Gets the last name of the user.
     *
     * @return the user's last name.
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the last name of the user.
     *
     * @param lastName the user's last name.
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * Gets the email address of the user.
     *
     * @return the user's email address.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email address of the user.
     *
     * @param email the user's email address.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the password for the user's account.
     *
     * @return the user's password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password for the user's account.
     *
     * @param password the user's password.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Checks whether the user has admin privileges.
     *
     * @return true if the user is an admin, false otherwise.
     */
    public boolean isAdmin() {
        return isAdmin;
    }

    /**
     * Sets whether the user has admin privileges.
     *
     * @param admin true if the user should have admin privileges, false otherwise.
     */
    public void setAdmin(boolean admin) {
        isAdmin = admin;
    }

    /**
     * Gets the timestamp of the user's last login.
     *
     * @return the timestamp of the user's last login.
     */
    public String getLastLogin() {
        return lastLogin;
    }

    /**
     * Sets the timestamp of the user's last login.
     *
     * @param lastLogin the timestamp of the user's last login.
     */
    public void setLastLogin(String lastLogin) {
        this.lastLogin = lastLogin;
    }

    /**
     * Gets the list of applications submitted by the user.
     *
     * @return the list of applications submitted by the user.
     */
    public List<ApplicationDetails> getApplicationDetails() {
        return applicationDetails;
    }

    /**
     * Sets the list of applications submitted by the user.
     *
     * @param applicationDetails the list of application details.
     */
    public void setApplicationDetails(List<ApplicationDetails> applicationDetails) {
        this.applicationDetails = applicationDetails;
    }
}
